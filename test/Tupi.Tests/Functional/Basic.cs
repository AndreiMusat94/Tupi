using System.IO;
using System.Linq;
using Tupi.Indexing;
using Xunit;

namespace Tupi.Tests.Functional
{
    public class Basic
    {

        [Theory]
        [InlineData(
            new[]
            {
                "Elemar is learning how to create an inverted index",
                "It is cool to use csharp.",
                "This is a simple string document created by Elemar",
                "This string will be indexed in an inverted index generated by Elemar"
            },
            "elemar",
            new[] {0, 2, 3}
        )]
        public void SearchBySingleTerm(
            string[] documents,
            string term,
            int[] expectedResults
        )
        {
            var index = StringIndexer.CreateIndex(documents);
            var results = index.Search(term);
            Assert.Equal(expectedResults, results);
        }

        [Theory]
        [InlineData(
            new[]
            {
                "Elemar is learning how to create an inverted index",
                "It is cool to use csharp.",
                "This is a simple string document created by Elemar",
                "This string will be indexed in an inverted index generated by Elemar"
            },
            "Elemar inverted",
            new[] { 0, 3 }
        )]
        public void SearchByQuery(
            string[] documents,
            string query,
            int[] expectedResults
        )
        {
            string[] terms;
            using (var reader = new StringReader(query))
            {
                terms = new TokenSource(reader)
                    .ReadAll(DefaultAnalyzer.Instance.Process)
                    .ToArray();
            }

            var index = StringIndexer.CreateIndex(documents);
            var results = index.Search(terms);
            Assert.Equal(expectedResults, results);
        }
    }
}
